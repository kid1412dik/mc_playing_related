(function(e){function t(t){for(var o,r,s=t[0],u=t[1],l=t[2],d=0,c=[];d<s.length;d++)r=s[d],i[r]&&c.push(i[r][0]),i[r]=0;for(o in u)Object.prototype.hasOwnProperty.call(u,o)&&(e[o]=u[o]);h&&h(t);while(c.length)c.shift()();return a.push.apply(a,l||[]),n()}function n(){for(var e,t=0;t<a.length;t++){for(var n=a[t],o=!0,r=1;r<n.length;r++){var s=n[r];0!==i[s]&&(o=!1)}o&&(a.splice(t--,1),e=u(u.s=n[0]))}return e}var o={},r={app:0},i={app:0},a=[];function s(e){return u.p+"js/"+({}[e]||e)+"."+{"chunk-23619682":"790c6ef5","chunk-3721ead4":"9c728f65","chunk-5261ce24":"33a5f406","chunk-6440f6d0":"087bbeed","chunk-2d0c4874":"17481aa7","chunk-8f46bade":"90f14405","chunk-a2233904":"4564fa27","chunk-778b9ee0":"36ac9948","chunk-8eb3390a":"6e77ce25"}[e]+".js"}function u(t){if(o[t])return o[t].exports;var n=o[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,u),n.l=!0,n.exports}u.e=function(e){var t=[],n={"chunk-3721ead4":1,"chunk-5261ce24":1,"chunk-6440f6d0":1,"chunk-8f46bade":1,"chunk-778b9ee0":1};r[e]?t.push(r[e]):0!==r[e]&&n[e]&&t.push(r[e]=new Promise(function(t,n){for(var o="css/"+({}[e]||e)+"."+{"chunk-23619682":"31d6cfe0","chunk-3721ead4":"c80905ed","chunk-5261ce24":"3fb7258a","chunk-6440f6d0":"77d10ac0","chunk-2d0c4874":"31d6cfe0","chunk-8f46bade":"4e540ad9","chunk-a2233904":"31d6cfe0","chunk-778b9ee0":"d5ac31aa","chunk-8eb3390a":"31d6cfe0"}[e]+".css",i=u.p+o,a=document.getElementsByTagName("link"),s=0;s<a.length;s++){var l=a[s],d=l.getAttribute("data-href")||l.getAttribute("href");if("stylesheet"===l.rel&&(d===o||d===i))return t()}var c=document.getElementsByTagName("style");for(s=0;s<c.length;s++){l=c[s],d=l.getAttribute("data-href");if(d===o||d===i)return t()}var h=document.createElement("link");h.rel="stylesheet",h.type="text/css",h.onload=t,h.onerror=function(t){var o=t&&t.target&&t.target.src||i,a=new Error("Loading CSS chunk "+e+" failed.\n("+o+")");a.code="CSS_CHUNK_LOAD_FAILED",a.request=o,delete r[e],h.parentNode.removeChild(h),n(a)},h.href=i;var p=document.getElementsByTagName("head")[0];p.appendChild(h)}).then(function(){r[e]=0}));var o=i[e];if(0!==o)if(o)t.push(o[2]);else{var a=new Promise(function(t,n){o=i[e]=[t,n]});t.push(o[2]=a);var l,d=document.createElement("script");d.charset="utf-8",d.timeout=120,u.nc&&d.setAttribute("nonce",u.nc),d.src=s(e),l=function(t){d.onerror=d.onload=null,clearTimeout(c);var n=i[e];if(0!==n){if(n){var o=t&&("load"===t.type?"missing":t.type),r=t&&t.target&&t.target.src,a=new Error("Loading chunk "+e+" failed.\n("+o+": "+r+")");a.type=o,a.request=r,n[1](a)}i[e]=void 0}};var c=setTimeout(function(){l({type:"timeout",target:d})},12e4);d.onerror=d.onload=l,document.head.appendChild(d)}return Promise.all(t)},u.m=e,u.c=o,u.d=function(e,t,n){u.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},u.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},u.t=function(e,t){if(1&t&&(e=u(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(u.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)u.d(n,o,function(t){return e[t]}.bind(null,o));return n},u.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return u.d(t,"a",t),t},u.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},u.p="/",u.oe=function(e){throw console.error(e),e};var l=window["webpackJsonp"]=window["webpackJsonp"]||[],d=l.push.bind(l);l.push=t,l=l.slice();for(var c=0;c<l.length;c++)t(l[c]);var h=d;a.push([0,"chunk-vendors"]),n()})({0:function(e,t,n){e.exports=n("56d7")},"034f":function(e,t,n){"use strict";var o=n("64a9"),r=n.n(o);r.a},"0753":function(e,t,n){e.exports=n.p+"img/postman-formdata.73a41553.png"},"0859":function(e,t,n){},"56d7":function(e,t,n){"use strict";n.r(t);n("14c6"),n("08c1"),n("4842"),n("d9fc");var o=n("2b0e"),r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{attrs:{id:"app"}},[n("TheTopHeader"),n("router-view"),n("TheFooter")],1)},i=[],a=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"theTopHeader"},[n("router-link",{attrs:{to:"/"}},[e._v("Home")]),n("router-link",{attrs:{to:"/article"}},[e._v("Articles")]),n("router-link",{attrs:{to:"/upcoming"}},[e._v("Up Coming")]),n("router-link",{attrs:{to:"/about"}},[e._v("About")]),e.checkLogin?e.checkLogin?n("router-link",{staticClass:"to-right",attrs:{to:{name:"pageuserinfo",params:{userName:this.$store.getters.getUserData.userName}}}},[e._v("Welcome! "+e._s(this.$store.getters.getUserData.userName))]):e._e():n("router-link",{staticClass:"to-right",attrs:{to:"/login"}},[e._v("Sign in / Sign up")])],1)},s=[],u=n("cebc"),l=n("2f62"),d={name:"thetopheader",components:{},computed:Object(u["a"])({},Object(l["c"])({checkLogin:"checkLogin",getUserName:"getUserData"}))},c=d,h=(n("bf02"),n("2877")),p=Object(h["a"])(c,a,s,!1,null,"672e6512",null),m=p.exports,g=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"theFooter"})},f=[],q={name:"thefooter",components:{}},b=q,w=Object(h["a"])(b,g,f,!1,null,"15fd90b0",null),y=w.exports,v={name:"app",components:{TheTopHeader:m,TheFooter:y},created:function(){}},k=v,I=(n("034f"),Object(h["a"])(k,r,i,!1,null,null,null)),x=I.exports,T=n("8c4f"),S={loggingIn:function(e,t){var n=e.commit;n("LOGGING_IN",t)},loggingOut:function(e){var t=e.commit;t("LOGGING_OUT")}},E={LOGGING_IN:function(e,t){e.loggedIn=!0,e.userData=t},LOGGING_OUT:function(e){e.loggedIn=!1,e.userData={}}},U={checkLogin:function(e){return e.loggedIn},getUserData:function(e){return e.userData}},A={loggedIn:!1,userData:{}};o["a"].use(l["a"]);var O=new l["a"].Store({state:A,mutations:E,actions:S,getters:U}),N=O;o["a"].use(T["a"]);var L=new T["a"]({routes:[{path:"/",name:"pagehome",component:function(){return n.e("chunk-23619682").then(n.bind(null,"6b9f"))}},{path:"/about",name:"pageabout",component:function(){return n.e("chunk-3721ead4").then(n.bind(null,"ba91"))}},{path:"/article",name:"pagepost",component:function(){return n.e("chunk-8eb3390a").then(n.bind(null,"9263"))}},{path:"/article/:articleId",name:"pagearticle",component:function(){return Promise.all([n.e("chunk-6440f6d0"),n.e("chunk-2d0c4874")]).then(n.bind(null,"3ae5"))}},{path:"/upcoming",name:"pageupcoming",component:function(){return Promise.all([n.e("chunk-6440f6d0"),n.e("chunk-8f46bade")]).then(n.bind(null,"8951"))}},{path:"/login",name:"pageauthentication",component:function(){return n.e("chunk-778b9ee0").then(n.bind(null,"64b5"))}},{path:"/register",name:"pageauthentication",component:function(){return n.e("chunk-778b9ee0").then(n.bind(null,"64b5"))}},{path:"/user/:userId",name:"pageuserinfo",component:function(){return n.e("chunk-5261ce24").then(n.bind(null,"3b63"))},meta:{requireAuthentication:!0}},{path:"editor/:userId/:articleId",name:"pageeditor",component:function(){return Promise.all([n.e("chunk-6440f6d0"),n.e("chunk-a2233904")]).then(n.bind(null,"b1ec"))},meta:{requireAuthentication:!0}}]});L.beforeEach(function(e,t,n){e.meta.requireAuthentication?N.getters.checkLogin?n():(alert("Please log in to visit this page!"),n({path:"/login"})):n()});var R=L,j=n("bc3a"),P=n.n(j),_=n("a7fe"),C=n.n(_);n("778b");o["a"].config.productionTip=!1,P.a.defaults.baseURL="http://192.168.240.140:3000/",o["a"].use(C.a,P.a),new o["a"]({router:R,store:N,render:function(e){return e(x)}}).$mount("#app")},"64a9":function(e,t,n){},"6f25":function(e,t,n){e.exports=n.p+"img/postman-x-www-form-urlencoded-data.966cbfa9.png"},"778b":function(e,t,n){"use strict";n("e2ef"),n("9633"),n("bd6d")},9633:function(e,t){e.exports='<h1 id="authentication-system-part-2">Authentication System Part 2</h1>\n<h2 id="authentication-system-on-frontend">Authentication System on Frontend</h2>\n<hr>\n<h3 id="goal">Goal</h3>\n<p>In this part, I&#39;ll try to build a log in pannel in the frontend. This is quite straightforword. It has the following requirements:</p>\n<ol>\n<li>There is a little button on topleft called &#39;log in / register&#39;</li>\n<li>When cilcked, it will buring the user to a log in page and notify the user that register is currently not opened.</li>\n<li>The log in pannel should allow the user to log in by email and password</li>\n<li>Once logged in, change the topleft &#39;log in / register&#39; button to another button which has the name of that user.</li>\n<li>Use fake data in this process. DO NOT use data from backend. That is what we will do next.</li>\n</ol>\n<hr>\n<h3 id="steps">Steps</h3>\n<ol>\n<li>Change the position of &#39;about&#39; and place &#39;log in / register&#39; button at where the &#39;about&#39; was</li>\n</ol>\n<blockquote>\n<p>First, align &#39;about&#39; to the left after &#39;up coming&#39;. \nThen create an authentication page at that place\nAfter that, create two components: &#39;log in&#39; and &#39;register&#39; for this page.\nFinally, add those two componenets to that page. Let that page switch them based on user&#39;s choice.</p>\n<p>(I&#39;ve just noticed that log in operation can be done only by vue. So may check that later and have a try.)</p>\n<p>Remeber to mention two pages on the same view.</p>\n</blockquote>\n<ol start="2">\n<li>Change header to show logged in user.</li>\n</ol>\n<blockquote>\n<p>After making the login / register pannel, now we need to make our header to show logged in user&#39;s infomation. And the header should keep showing that infomation until the user close browser or logout manually. </p>\n<p>And one inportant point, the header will keep showing that infomation acrossing different pages.</p>\n<p>To do this, we need to keep some infomation (here is the login information) acrossing different pages. To do this, it seems that we need to introduce vuex to our frontend.</p>\n<p>Before this, let me introduce one of my important decision. In backend and frontend design, there are many different ways to divide the works for backend and frontend. Here I decide to use &quot;thin server fat client&quot; mode. Which means our server in this situation, will only be used to provide data through certain APIs, and let the clients to perform the computing works. </p>\n<p>In this mode, we will open two ports on our server. One is 80, used for normal visit. Which is known as our frontend. The other one can be any other port, here we will use 8085. The backend will provide its APIs through that port. </p>\n<p>The advantages of this mode can be summarized into followig three points:</p>\n<blockquote>\n<ol>\n<li><p>I don&#39;t have much money to run this server, so I have to shift the presure on my server side to client side.</p>\n</li>\n<li><p>It is currently a trend to use &quot;fat client&quot;. Because this will allow the client to perform many complicated works. Although we don&#39;t need those hugh computing power at this stage, it is good to design our platform in this way jsut in case we may need it someday.</p>\n</li>\n<li><p>In this mode, the frontend and backend are completely separated. If two groups engineers work on this at the same time, they only need APIs to be agreed and they can develop the backend and frontend respectively.</p>\n</li>\n</ol>\n</blockquote>\n<p>Of course there are many disadvantages of this mode. In a long time before, people choose to use &quot;thin client&quot; and let the server to finish most of the jobs. However that is beyond our discussion here and we may discuss that later.</p>\n<p>Anyway, here we will use vuex to store the logging infomation so that the frontend can decide when and why to verify the current user. Once the frontend needs to verify the current user, it should send a request with the user credits to the backend API and the backend should respond with the verification result.</p>\n</blockquote>\n<h3 id="to-be-improved">To be improved</h3>\n<ol>\n<li>I forgot to make authentication page into two components. Make sure do that later.</li>\n</ol>\n'},bd6d:function(e,t){e.exports='<h1 id="run-our-web">Run Our Web</h1>\n<h2 id="run-the-web-we-have-built-so-far">Run the web we have built so far</h2>\n<hr>\n<h3 id="goal">Goal</h3>\n<ol>\n<li>Use docker to help deploy our web.</li>\n<li>Build Vue, Express, MySQL into three containers and use docker-compose to run them all at once.</li>\n<li>Test Vue</li>\n<li>Test Express using Postman</li>\n<li>Test MySQL using MySQL Workbench</li>\n<li>Deploy whole web to digital ocean server.</li>\n<li>Do some operations on that server, try to add some data into that database.</li>\n<li>Try to download that database back to local test server.</li>\n<li>Based on the step above, write a script to download data from our online server automantically.</li>\n</ol>\n<hr>\n<h3 id="steps">Steps</h3>\n<ol>\n<li>Using docker to deploy our Vue part code<blockquote>\n<p>This has been finished and I will not repeat that here.</p>\n<p>Strange problem when changing directory. It is reported that</p>\n<pre><code class="language-bash">web_1  | 2019/05/30 09:30:33 [warn] 1#1: the &quot;user&quot; directive makes sense only if the master process runs with super-user privileges, ignored in /etc/nginx/nginx.conf:1\nweb_1  | nginx: [warn] the &quot;user&quot; directive makes sense only if the master process runs with super-user privileges, ignored in /etc/nginx/nginx.conf:1\nweb_1  | 2019/05/30 09:30:33 [emerg] 1#1: unexpected end of file, expecting &quot;;&quot; or &quot;}&quot; in /etc/nginx/modules-enabled/50-mod-http-image-filter.conf:1\nweb_1  | nginx: [emerg] unexpected end of file, expecting &quot;;&quot; or &quot;}&quot; in /etc/nginx/modules-enabled/50-mod-http-image-filter.conf:1\n</code></pre>\n<p>Compaing to that, the normal information was:</p>\n<pre><code class="language-bash">web_1  | 2019/05/30 09:18:01 [warn] 1#1: the &quot;user&quot; directive makes sense only if the master process runs with super-user privileges, ignored in /etc/nginx/nginx.conf:1\nweb_1  | nginx: [warn] the &quot;user&quot; directive makes sense only if the master process runs with super-user privileges, ignored in /etc/nginx/nginx.conf:1</code></pre>\n<p>After carefully inspected that file, I didn&#39;t find any problem in it. It can work originally, however it is not working now. Which makes me quite confusing.</p>\n<p>What makes the whole thing even worse, when I revert my commit, the problem was just gone.</p>\n<p>Then, I realized that this might be caused by different line ender of windows and linux? So, I go back to older commit and download the working code back again and hoping to find the differences between them.</p>\n<p>However, the problem is far more complicated than I thought. No matter how I tried, as long as the file is copied into Windows system, it is changed immediately and no longer work. For example, if I have a working copy of my code, I copy it to windows system, do nothing, copy it back, and now it&#39;s not working. And the amazing point is that if I sync my windows and linux by github, there will be no problem and everything works fine.</p>\n<p>So, since I have no way to deal with it, I gave up and reset my commit to before makinh changing directory operation. </p>\n<p>In summary, this is caused by the link file in linux, when copied into windows, it is broken and become a plain text file now. I also noticed that if I use linux to check the property of the original file and the file copied from Windows, the second file is &quot;plain text&quot; rather than &quot;link&quot; in linux.</p>\n<p>So, for now, I&#39;ve using linux to change the directory and everything works fine now. Still, I didn&#39;t find a way to use these linux link files on Windows. If you copy or move any linux link files with windows, it will be changed into plain text later when used on linux.</p>\n<p>Maybe I can add this to my todo list: try to find a way to deal with linux link files on Windows :D.</p>\n</blockquote>\n</li>\n</ol>\n<ol start="2">\n<li><p>Using docker to deploy MySQL</p>\n<blockquote>\n<p>Based on what has been introduced online, try to deploy our database, MySQL</p>\n<p>Building finished. Not tested yet. </p>\n<p>Do remember to change the password when deploying. Write a document for later developer to check so that they can know where to change before deploying. (I have worte that in the main README.md file.)</p>\n</blockquote>\n</li>\n<li><p>Using docker to deploy Express</p>\n<blockquote>\n<p>First, I tried to use a docker file to directly build a node environment, copy my files in and run node. After that, expose my ports to outside. So my docker file is like</p>\n<pre><code class="language-docker">FROM node:latest\n\nRUN mkdir -p /server\nWORKDIR /server\n\nCOPY ./express /server\nRUN npm install</code></pre>\n<p>And in my docker-compose file I put:</p>\n<pre><code class="language-docker">server:\n    build: ./Server/server\n\n    ports:\n      - &quot;3000:8085&quot;\n\n    command: [npm, &#39;start&#39;]</code></pre>\n<p>Now it works properly and I can visit it through the 3000 port.</p>\n<p>But in this way, it is clear that we didn&#39;t apply nginx on our backend container. It might need more improvements.</p>\n</blockquote>\n</li>\n</ol>\n<hr>\n<h3 id="todos">Todos</h3>\n<ol>\n<li><p>Find a better way to store password in github. Since our website will be open to everyone online, it is not a good idea to save our password in our github repo.</p>\n</li>\n<li><p>Am I using RESTful style in my backend (APIs) programming?</p>\n</li>\n<li><p>It seems that our backend is not using nginx. Maybe try to solve it later.</p>\n</li>\n<li><p>Maybe try to create a quick script to build the frontend and backend at the same time.</p>\n</li>\n<li><p>Consider to push our docker image to docker.io</p>\n</li>\n<li><p>Add depends in our docker-compose file. Basically now everything is starting on their own orders.</p>\n</li>\n<li><p>Maybe expose our database to public Internet is not a good idea. May be we can pack backend with database in one docker container and only let the backend port to be exposed.</p>\n</li>\n<li><p>Before truely deploy this on true server, check its security and remove(Or at least remove those on the cloud) any sensitive data.</p>\n</li>\n<li><p>Try to use one certain version docker image. Like nginx and node. Do not use :latest because this might cause our web not working when node is updated.</p>\n</li>\n</ol>\n'},bf02:function(e,t,n){"use strict";var o=n("0859"),r=n.n(o);r.a},e2ef:function(e,t,n){e.exports='<h1 id="authentication-system-part-1">Authentication System Part 1</h1>\n<h2 id="authentication-system-on-backend">Authentication System on Backend</h2>\n<hr>\n<h3 id="goal">Goal</h3>\n<p>In this part, I&#39;ll try to build a fully functional authentication system on the backend part. It has the following requirements:</p>\n<ol>\n<li>It will accept register.</li>\n<li>It will accept login.</li>\n<li>It will NOT protect user&#39;s password during they are transmitting at this stage.</li>\n<li>It will distinguish different users and give them different rights. At this stage, a user can be either user, admin, superadmin.</li>\n<li>Level &quot;user&quot; will have no special functions at this stage.</li>\n<li>Level &quot;admin&quot; will have no special functions at this stage.</li>\n<li>Level &quot;superadmin&quot; will have full control of the whole website.</li>\n</ol>\n<hr>\n<h3 id="steps">Steps</h3>\n<ol start="0">\n<li>Before Working on this</li>\n</ol>\n<blockquote>\n<p>I have set the MySQL database before we start. I created a schema called &#39;expressdb&#39; and created a table under it named &#39;User&#39;. Then I use &#39;uuid&#39; as the primary key. I defined three columns, they are &#39;userName&#39;, &#39;pwd&#39;, &#39;userEmail&#39;. Users will need them as their logging in credits. </p>\n<p>Besides, I also defined &#39;userBio&#39; and &#39;userLevel&#39; for it. &#39;userBio&#39; is used for an example for query users. At the same time, &#39;userLevel&#39; is used to define which level the user should be.</p>\n<p>And if you come across the error that your machine IP is rejected by the database, please log into the data base and set &#39;host&#39; of your account to &#39;%&#39;</p>\n</blockquote>\n<ol>\n<li>Write SQL configs in Express.</li>\n</ol>\n<blockquote>\n<p>In the /backend/ folder, make a dir called &#39;db&#39;. And since we may change our db option, here we make a dir called &#39;sql&#39; under &#39;db&#39; dir. Now, we can put all our sql settings or configs for express in this dir.</p>\n<p>First, let&#39;s put our logging info in. Create a js file called sqlConfigs and export the sql configs from there.</p>\n<p>Here I run my database on 192.168.240.141 on port 3306. These are my configs:</p>\n<pre><code class="language-js">module.exports = {  \n  mysql: {   \n    host: &#39;192.168.240.141&#39;,     \n    user: &#39;root&#39;,   \n    password: &#39;password&#39;,  \n    database:&#39;expressdb&#39;, \n    port: 3306  \n  }\n };</code></pre>\n<p>Also notice that I have create a schema in SQL called &#39;expressdb&#39;.</p>\n</blockquote>\n<ol start="2">\n<li>Write SQL query for express</li>\n</ol>\n<blockquote>\n<p>To let our backend: Express to send queries to the database, we need to write query operations for it. Here we&#39;ll use user as an example. Based on what I have defined in the database, here we write three methods for it:</p>\n<ol>\n<li>Get user by id(uuid)</li>\n<li>Get all users (To be clear, when you get users here, you can only get their name, uuid and bio. DO NOT get their password or email etc.)</li>\n<li>Add / Insert one user to the database</li>\n</ol>\n<p>With these three opertaions, we should be able to write log in / out operation and register opertaion.</p>\n<p>Now, we create a js file named &#39;userSqlOp.js&#39;(User SQL Opertions) under db/sql/. In the file we put these code:</p>\n<pre><code class="language-js">var UserSQL = {  \n  insert:&#39;INSERT INTO User(uuid,userName,pwd,userEmail,userBio,userLevel) VALUES(?,?,?,?,?,?)&#39;, \n  queryAll:&#39;SELECT * FROM User&#39;,  \n  getUserById:&#39;SELECT * FROM User WHERE uuid = ? &#39;,\n};\n\nmodule.exports = UserSQL;</code></pre>\n<p>Later we will explain how to use these code to connect our backend with our database.</p>\n</blockquote>\n<ol start="3">\n<li>Write login method in Express</li>\n</ol>\n<blockquote>\n<p>Now our express is ready to operate our database. We can now write our log in method in our backend.\nTo do that, we need to create user APIs. Find the &#39;router&#39; folder under express root folder, create a dir called &#39;apis&#39;, and under it, create another dir called &#39;v1&#39;. This would be helpful when you later manage your apis acrossing different versions. </p>\n<p>First, under the &#39;v1&#39; dir, create a js file called &#39;User.js&#39; to store all APIs in path /User/.</p>\n<p>Then, in this file, we need to import our libraries. Use these code to import libs.</p>\n<pre><code class="language-js">// Use express module\nvar express = require(&#39;express&#39;);\nvar router = express.Router();\n\n// Use SQL modules with our configs\nvar mysql = require(&#39;mysql&#39;);\nvar mysqlConfig = require(&#39;../../../db/sql/sqlConfigs&#39;);\nvar mysqlUserOp = require(&#39;../../../db/sql/userSqlOp&#39;);\n\n// Build a connection pool for sql connection\nvar mysqlPool = mysql.createPool(mysqlConfig.mysql);</code></pre>\n<p>After that, now we can build our APIs by  <code>router.get</code> or <code>router.post</code>.</p>\n<p>However, when I try these two methods, I realized one problem: I cannot get the req.body in post method. When I tried to get infomation from req.body, I got only null value from it.</p>\n<p>Then from <a href="https://blog.csdn.net/TyrionJ/article/details/81990048">This Blog</a> I think it might be body-parser reason. However it is not. I imported body-parser according to the blog, but my server cannot run this time. It will not respond to any request once body-parser is on. After I searched online and read some more blogs, I found nothing can explain this. Finally, I think I should read the Express <a href="http://www.expressjs.com.cn/4x/api.html">offical document</a> and luckily it explains that </p>\n<pre><code class="language-js">app.use(express.json());\napp.use(express.urlencoded({ extended: true }));</code></pre>\n<p>has replaced the original body-parser statements (Which are mentioned in the blog):</p>\n<pre><code class="language-js">app.use(bodyPaser.json)\napp.use(bodyParser.urlencoded({ extended: false})) </code></pre>\n<p>Therefore, using body-parser is a dead way.</p>\n<p>However, my problem is still there and I cannot receive any data from client post body. Then I realized that our server is accepting x-www-form-urlencoded data not form-data I sent in Postman. So I changed it and everything works fine.</p>\n<img alt="Postman-formdata" src="'+n("0753")+'">\n<div align=center>Using form-data</div>\n<img alt="Postman-x-www-form-urlencoded-data" src="'+n("6f25")+'">\n<div align=center>Using x-www-form-urlencoded-data</div>\n\n<p>Now, sinces I have found the problem, I think I can try to let Express support for form-data. So I search it on offical document and found in <a href="http://www.expressjs.com.cn/4x/api.html">here</a>. The offical document said:</p>\n<blockquote>\n<p>In Express 4, req.files is no longer available on the req object by default. To access uploaded files on the req.files object, use multipart-handling middleware like busboy, multer, formidable, multiparty, connect-multiparty, or pez.</p>\n</blockquote>\n<p>So I&#39;m going to try using middleware to deal with this problem.</p>\n</blockquote>\n<ol start="4">\n<li>Using connect-multiparty to support form-data in post</li>\n</ol>\n<blockquote>\n<p>After searching I decide to use connect-multiparty. Basically, to enable form-data support, all we need to do is import it in router files, and use it in .post function.</p>\n<p>The example of it is given as:</p>\n<pre><code class="language-js">var multipart = require(&#39;connect-multiparty&#39;);\nvar multipartMiddleware = multipart();\napp.post(&#39;/upload&#39;, multipartMiddleware, &gt; function(req, resp) {\n  console.log(req.body, req.files);\n  // don&#39;t forget to delete all req.files when done\n});</code></pre>\n<p>So now, our user.js looks like this:</p>\n<pre><code class="language-js">// Use express module\nvar express = require(&#39;express&#39;);\nvar multipart = require(&#39;connect-multiparty&#39;);\nvar router = express.Router();\n\n// Use SQL modules with our configs\nvar mysql = require(&#39;mysql&#39;);\nvar mysqlConfig = require(&#39;../../../db/sql/sqlConfigs&#39;);\nvar mysqlUserOp = require(&#39;../../../db/sql/userSqlOp&#39;);\nvar multipartMiddleware = multipart();\n\n// Build a connection pool for sql connection\nvar mysqlPool = mysql.createPool(mysqlConfig.mysql);\n\n// User login\n// DO NOT use &#39;get&#39; here. Use &#39;post&#39; to secure &gt; user&#39;s password.\nrouter.post(&#39;/Login&#39;, multipartMiddleware, (req, res, next) =&gt; {\n  // Get connection from connection pool\n  // mysqlPool.getConnection((err, connection) =&gt; {\n  //   if (err) throw (err);\n\n  //   console.log(req.body);\n  // });\n  res.send(req.body);\n});\n\nmodule.exports = router;\n</code></pre>\n<p>Now, let&#39;s move on. Since post sending problem has been solved, I then tried to log in the SQL database and failed. The error I received is:</p>\n<blockquote>\n<p>Client does not support authentication protocol requested by server; consider upgrading MySQL client</p>\n</blockquote>\n<p>This is caused by the SQL client version is too low. Although I have upgraded my SQL client in nodejs, it is still not new enough.</p>\n<p>So the solution is simple. Since our client cannot be changed (I&#39;m already the newest version) and I don&#39;t want to change my server version (It&#39;s not an easy stuff to reinstall the database). So I decide to reset my password to older version. This can be done by</p>\n<pre><code class="language-sql">USE mysql;\nALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;your new password&#39;;</code></pre>\n<p>And during resolving this problem, I got another error from the database terminal</p>\n<pre><code class="language-bash">ERROR 1396 (HY000): Operation ALTER USER failed for &#39;root&#39;@&#39;localhost&#39;</code></pre>\n<p>After searching it on the Internet, I realized that this is beacuse I changed the host for my root account. To allow it log in from anywhere, I changed the host to &#39;%&#39;. Therefore, for me, I should use </p>\n<pre><code class="language-sql">ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;your new password&#39;;</code></pre>\n<p>And now I can connect to the database;</p>\n<p>After all those problems, we now can finally create our log in api. The method is quite straightforward: First, divide all variables according to API document. Second, use the keyword to send query to database. Here we will allow user to login through either their email address or their user name. Third, return the results. Here three situations will be considered: 1. Logging in succeeded. 2. Password or username error. 3. User is not registered.</p>\n<p>Based on our plan above, I then tried to add login API. You may have noticed that the question mark &quot;?&quot; we used before</p>\n<pre><code class="language-js">connection.query(&#39;SELECT * FROM `books` WHERE `author` = ?&#39;, [&#39;David&#39;], function (error, results, fields) {\n  // error will be an Error if one occurred during the query\n  // results will contain the results of the query\n  // fields will contain information about the returned results fields (if any)\n});</code></pre>\n<p>And for the fields in here, I&#39;m quite confused about what is the &quot;results fields&quot;. So I printed out the results of <code>onnection.query(SELECT * FROM User WHERE uuid = ? , [1], function (error, results, fields)</code></p>\n<p>This is my results:</p>\n<pre><code class="language-json">{\n    &quot;results&quot;: [\n        {\n            &quot;uuid&quot;: 1,\n            &quot;userName&quot;: &quot;Jon&quot;,\n            &quot;pwd&quot;: &quot;12345&quot;,\n            &quot;userEmail&quot;: &quot;jon@233.com&quot;,\n            &quot;userBio&quot;: &quot;wahaha&quot;,\n            &quot;userLevel&quot;: &quot;User&quot;\n        }\n    ],\n    &quot;fields&quot;: [\n        {\n            &quot;catalog&quot;: &quot;def&quot;,\n            &quot;db&quot;: &quot;expressdb&quot;,\n            &quot;table&quot;: &quot;User&quot;,\n            &quot;orgTable&quot;: &quot;User&quot;,\n            &quot;name&quot;: &quot;uuid&quot;,\n            &quot;orgName&quot;: &quot;uuid&quot;,\n            &quot;charsetNr&quot;: 63,\n            &quot;length&quot;: 11,\n            &quot;type&quot;: 3,\n            &quot;flags&quot;: 16899,\n            &quot;decimals&quot;: 0,\n            &quot;zeroFill&quot;: false,\n            &quot;protocol41&quot;: true\n        },\n        {\n            &quot;catalog&quot;: &quot;def&quot;,\n            &quot;db&quot;: &quot;expressdb&quot;,\n            &quot;table&quot;: &quot;User&quot;,\n            &quot;orgTable&quot;: &quot;User&quot;,\n            &quot;name&quot;: &quot;userName&quot;,\n            &quot;orgName&quot;: &quot;userName&quot;,\n            &quot;charsetNr&quot;: 33,\n            &quot;length&quot;: 384,\n            &quot;type&quot;: 253,\n            &quot;flags&quot;: 4097,\n            &quot;decimals&quot;: 0,\n            &quot;zeroFill&quot;: false,\n            &quot;protocol41&quot;: true\n        },\n        {\n            &quot;catalog&quot;: &quot;def&quot;,\n            &quot;db&quot;: &quot;expressdb&quot;,\n            &quot;table&quot;: &quot;User&quot;,\n            &quot;orgTable&quot;: &quot;User&quot;,\n            &quot;name&quot;: &quot;pwd&quot;,\n            &quot;orgName&quot;: &quot;pwd&quot;,\n            &quot;charsetNr&quot;: 33,\n            &quot;length&quot;: 60,\n            &quot;type&quot;: 253,\n            &quot;flags&quot;: 4097,\n            &quot;decimals&quot;: 0,\n            &quot;zeroFill&quot;: false,\n            &quot;protocol41&quot;: true\n        },\n        {\n            &quot;catalog&quot;: &quot;def&quot;,\n            &quot;db&quot;: &quot;expressdb&quot;,\n            &quot;table&quot;: &quot;User&quot;,\n            &quot;orgTable&quot;: &quot;User&quot;,\n            &quot;name&quot;: &quot;userEmail&quot;,\n            &quot;orgName&quot;: &quot;userEmail&quot;,\n            &quot;charsetNr&quot;: 33,\n            &quot;length&quot;: 765,\n            &quot;type&quot;: 253,\n            &quot;flags&quot;: 4097,\n            &quot;decimals&quot;: 0,\n            &quot;zeroFill&quot;: false,\n            &quot;protocol41&quot;: true\n        },\n        {\n            &quot;catalog&quot;: &quot;def&quot;,\n            &quot;db&quot;: &quot;expressdb&quot;,\n            &quot;table&quot;: &quot;User&quot;,\n            &quot;orgTable&quot;: &quot;User&quot;,\n            &quot;name&quot;: &quot;userBio&quot;,\n            &quot;orgName&quot;: &quot;userBio&quot;,\n            &quot;charsetNr&quot;: 33,\n            &quot;length&quot;: 765,\n            &quot;type&quot;: 253,\n            &quot;flags&quot;: 0,\n            &quot;decimals&quot;: 0,\n            &quot;zeroFill&quot;: false,\n            &quot;protocol41&quot;: true\n        },\n        {\n            &quot;catalog&quot;: &quot;def&quot;,\n            &quot;db&quot;: &quot;expressdb&quot;,\n            &quot;table&quot;: &quot;User&quot;,\n            &quot;orgTable&quot;: &quot;User&quot;,\n            &quot;name&quot;: &quot;userLevel&quot;,\n            &quot;orgName&quot;: &quot;userLevel&quot;,\n            &quot;charsetNr&quot;: 33,\n            &quot;length&quot;: 30,\n            &quot;type&quot;: 254,\n            &quot;flags&quot;: 257,\n            &quot;decimals&quot;: 0,\n            &quot;zeroFill&quot;: false,\n            &quot;protocol41&quot;: true\n        }\n    ]\n}</code></pre>\n<p>It seems that each object in the fields coresponds to one item in results object. And the fields contain some &quot;characters&quot; of the resutls.</p>\n<p>But anyway, we only need results now.</p>\n<p>Define error codes in backend</p>\n<p>change results.length === 0, this is not right</p>\n<p>remeber to change the database column name to be the same with the name used in the backend.</p>\n</blockquote>\n<ol start="5">\n<li>Build a register api</li>\n</ol>\n<blockquote>\n<p>Like the login API, we still work in User.js file. This time, we create an API to listen at User/Register/. And when this api is called, we would like the information of the user can be inserted to our database.</p>\n<pre><code class="language-js">// User register\n// DO NOT use &#39;get&#39; here. Use &#39;post&#39; to secure &gt; user&#39;s password.\nrouter.post(&#39;/Register&#39;, multipartMiddleware, &gt; (req, res, next) =&gt; {\n  // Get connection from connection pool\n  mysqlPool.getConnection((err, connection) =&gt; {\n    if (err) throw (err);\n\n    let [\n      uuid,\n      userName,\n      userPwd,\n      userEmail,\n    ] = [\n        parseInt(req.body.uuid),\n        req.body.userName,\n        req.body.userPwd,\n        req.body.userEmail,\n      ];\n\n    connection.query(mysqlUserOp.insertSimplfied, [uuid, userName, userPwd, userEmail], (error, results, fields) =&gt; {\n      if (error) {\n        console.log(error);\n        res.send({\n          &#39;success&#39;: false,\n          &#39;flag&#39;: flagCode.ERROR_UNKNOWN_USER_REGISTER_ERROR,\n          &#39;error&#39;: error,\n        });\n        return;\n      };\n\n      res.send({\n        &#39;success&#39;: true,\n        &#39;flag&#39;: flagCode.INFO_USER_REGISTER_SUCCEEDED,\n      });\n\n    });\n    // Release the connection\n    // connection.release(); // might not work\n    mysqlPool.releaseConnection(connection);\n  });\n});</code></pre>\n<p>Of course there are more works to do.</p>\n<p>First, do validate the info provided by users.</p>\n<p>Second, try to write a &#39;send and return&#39; function.</p>\n<p>And don&#39;t forgot to remeber why using <code>console.log(error)</code> instead of <code>throw(error)</code>. And some <code>throw(error)</code> may still in the code, remeber go to change them.</p>\n</blockquote>\n<ol start="6">\n<li>Let Express deal with sessions and cookies</li>\n</ol>\n<blockquote>\n<p>Only login is not enough. Our backend should be able to remeber those who have logged in and gives correct authentications to these users.</p>\n<p>To do that, we need to introduce sessions and cookies to our Express.</p>\n<p>First, install cookie-parser and express-session</p>\n<p>Ask the difference between session and cookies. I know that sessions are stored on the server and cookies are stored on the client. But if we already have cookies, why do we need sessions? we can identify different users already, can&#39;t we?</p>\n</blockquote>\n<ol start="7">\n<li>Build an authentication change API. </li>\n</ol>\n<blockquote>\n<p>Where a user has higher level can get a user list which contains users who have the same and lower level.\nIn addition, the user at higher level can change the authentications of the user at lower level</p>\n<p>Got a problem:</p>\n<pre><code>connection is not defined\n\nReferenceError: connection is not defined</code></pre><pre><code> throw err; // Rethrow non-MySQL errors\n     ^\n\nError [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client</code></pre><p>Solved. Due to wrong connect place</p>\n<p>rewrite falgs. improved the way to include new flags</p>\n<p>adding communication support functions to it. So it can keep our code concise and neat. Details can refer to the <strong>communicationSupport</strong>.js file.</p>\n<p>Rewrite post methods in User.js to apply the supports methods.</p>\n</blockquote>\n'}});
//# sourceMappingURL=app.4ebcadaa.js.map